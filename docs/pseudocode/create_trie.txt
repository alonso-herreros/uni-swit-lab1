//Defining the node structure
struct TrieNode {
    uint_32t data_binary; // IP address, pure binary
    int prefixLength; // Length of the prefix associated to this node. 0 if there is no prefix.
    struct TrieNode *children[1]; //Matrix that contains the left or right children in this node.
}

//Creating a TrieNode
TrieNode* create_Node() {
    Initializing Trie* 0 and Trie *1 to NULL;
    end = 0;
    data_binary = -1;
    Return the node;
}

//Function to insert an IP direction to the trie
TrieNode* insert (TrieNode* root, string cidr, int data_decimal){//It's better to use a variable
 such as uint_32t for data_decimal
    //Create an auxiliary node;
    TrieNode* aux = root;
    //obtaining the prefix
    int prefix = to_number(cidr);

    for (int i=0; i<prefix; i++){
        int bit = ip_binary[i];

        if(aux->children[bit]==NULL){ //We have reached an empty node
            aux->children[bit] = create_Node();
        }
        if(aux->)
        aux = aux->children[bit]; // We move one level deeper in the trie
    }
}

//Creating a trie from the r.txt file
TrieNode* create_trie(r.txt) {
    Creating a root node with CreateNode();

    Open r.txt
    While text is not empty:
        Read line
        Extract data in decimal and CIDR direction
        Insert the node
    Close the file
    Return the root of the trie;
}
